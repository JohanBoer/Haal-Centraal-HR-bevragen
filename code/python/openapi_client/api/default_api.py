# coding: utf-8

"""
    Handelsregister bevragen

    D.m.v. deze toepassing worden meerdere, korte bevragingen op het Handelsregister beschikbaar gesteld.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_correspondentieadres_eigenaar(self, **kwargs):  # noqa: E501
        """van eigenaren  # noqa: E501

        Zoek de de aanschrijfwijze en het correpondentie-adres van een eigenaar van een bedrijf of organisatie die deelneemt aan het economisch verkeer danwel eigenaar is van een kadastraal onroerende zaak.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_correspondentieadres_eigenaar(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str identificatiehandelsregisternatuurlijkpersoon: Het burgerservicenummer van de persoon die een zakelijk recht op een kadastraal onroerende zaak heeft. Deze persoon is zakelijk gerechtigde van de kadastraal onroerende zaak. Door deze query-parameter te gebruiken worden Kadastraal Onroerende Zaken geretourneerd waar deze persoon een zakelijk recht op heeft.
        :param str rsin: De identificatie van de NietNatuurlijkPersoon, bijvoorbeel een rechtspersoon (evt in oprichting), een samenwerkingsverband of een eenmanszaak met meerdere eigenaren
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CorrespondentieAdresEigenaarHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_correspondentieadres_eigenaar_with_http_info(**kwargs)  # noqa: E501

    def get_correspondentieadres_eigenaar_with_http_info(self, **kwargs):  # noqa: E501
        """van eigenaren  # noqa: E501

        Zoek de de aanschrijfwijze en het correpondentie-adres van een eigenaar van een bedrijf of organisatie die deelneemt aan het economisch verkeer danwel eigenaar is van een kadastraal onroerende zaak.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_correspondentieadres_eigenaar_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str identificatiehandelsregisternatuurlijkpersoon: Het burgerservicenummer van de persoon die een zakelijk recht op een kadastraal onroerende zaak heeft. Deze persoon is zakelijk gerechtigde van de kadastraal onroerende zaak. Door deze query-parameter te gebruiken worden Kadastraal Onroerende Zaken geretourneerd waar deze persoon een zakelijk recht op heeft.
        :param str rsin: De identificatie van de NietNatuurlijkPersoon, bijvoorbeel een rechtspersoon (evt in oprichting), een samenwerkingsverband of een eenmanszaak met meerdere eigenaren
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CorrespondentieAdresEigenaarHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'identificatiehandelsregisternatuurlijkpersoon',
            'rsin'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_correspondentieadres_eigenaar" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('identificatiehandelsregisternatuurlijkpersoon' in local_var_params and  # noqa: E501
                                                        len(local_var_params['identificatiehandelsregisternatuurlijkpersoon']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `identificatiehandelsregisternatuurlijkpersoon` when calling `get_correspondentieadres_eigenaar`, length must be less than or equal to `9`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identificatiehandelsregisternatuurlijkpersoon' in local_var_params and local_var_params['identificatiehandelsregisternatuurlijkpersoon'] is not None:  # noqa: E501
            query_params.append(('identificatiehandelsregisternatuurlijkpersoon', local_var_params['identificatiehandelsregisternatuurlijkpersoon']))  # noqa: E501
        if 'rsin' in local_var_params and local_var_params['rsin'] is not None:  # noqa: E501
            query_params.append(('rsin', local_var_params['rsin']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/correspondentieadressen', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CorrespondentieAdresEigenaarHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_maatschappelijke_activiteiten(self, **kwargs):  # noqa: E501
        """van personen  # noqa: E501

        Zoek maatschappelijke activiteiten correpondentie-adres op basis van het burgerservicenummer of het RSIN van de eigenaar.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_maatschappelijke_activiteiten(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ingeschrevenpersoon__burgerservicenummer: Het burgerservicenummer van de persoon die een zakelijk recht op een kadastraal onroerende zaak heeft. Deze persoon is zakelijk gerechtigde van de kadastraal onroerende zaak. Door deze query-parameter te gebruiken worden Kadastraal Onroerende Zaken geretourneerd waar deze persoon een zakelijk recht op heeft.
        :param str rsin: De identificatie van de NietNatuurlijkPersoon, bijvoorbeel een rechtspersoon (evt in oprichting), een samenwerkingsverband of een eenmanszaak met meerdere eigenaren
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: MaatschappelijkeActiviteitHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_maatschappelijke_activiteiten_with_http_info(**kwargs)  # noqa: E501

    def get_maatschappelijke_activiteiten_with_http_info(self, **kwargs):  # noqa: E501
        """van personen  # noqa: E501

        Zoek maatschappelijke activiteiten correpondentie-adres op basis van het burgerservicenummer of het RSIN van de eigenaar.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_maatschappelijke_activiteiten_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ingeschrevenpersoon__burgerservicenummer: Het burgerservicenummer van de persoon die een zakelijk recht op een kadastraal onroerende zaak heeft. Deze persoon is zakelijk gerechtigde van de kadastraal onroerende zaak. Door deze query-parameter te gebruiken worden Kadastraal Onroerende Zaken geretourneerd waar deze persoon een zakelijk recht op heeft.
        :param str rsin: De identificatie van de NietNatuurlijkPersoon, bijvoorbeel een rechtspersoon (evt in oprichting), een samenwerkingsverband of een eenmanszaak met meerdere eigenaren
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(MaatschappelijkeActiviteitHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ingeschrevenpersoon__burgerservicenummer',
            'rsin'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_maatschappelijke_activiteiten" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('ingeschrevenpersoon__burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['ingeschrevenpersoon__burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `ingeschrevenpersoon__burgerservicenummer` when calling `get_maatschappelijke_activiteiten`, length must be less than or equal to `9`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ingeschrevenpersoon__burgerservicenummer' in local_var_params and local_var_params['ingeschrevenpersoon__burgerservicenummer'] is not None:  # noqa: E501
            query_params.append(('ingeschrevenpersoon__burgerservicenummer', local_var_params['ingeschrevenpersoon__burgerservicenummer']))  # noqa: E501
        if 'rsin' in local_var_params and local_var_params['rsin'] is not None:  # noqa: E501
            query_params.append(('rsin', local_var_params['rsin']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maatschappelijkeactiviteiten', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaatschappelijkeActiviteitHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vestigingsadres_eigenaar(self, **kwargs):  # noqa: E501
        """van een persoon  # noqa: E501

        Zoek het vestigings-adres van een eigenaar van een bedrijf of organisatie die deelneemt aan het economisch verkeer danwel eigenaar is van een kadastraal onroerende zaak.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vestigingsadres_eigenaar(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str identificatiehandelsregisternatuurlijkpersoon: Het burgerservicenummer van de persoon die een zakelijk recht op een kadastraal onroerende zaak heeft. Deze persoon is zakelijk gerechtigde van de kadastraal onroerende zaak. Door deze query-parameter te gebruiken worden Kadastraal Onroerende Zaken geretourneerd waar deze persoon een zakelijk recht op heeft.
        :param str rsin: De identificatie van de NietNatuurlijkPersoon, bijvoorbeel een rechtspersoon (evt in oprichting), een samenwerkingsverband of een eenmanszaak met meerdere eigenaren
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VestigingsAdresEigenaarHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_vestigingsadres_eigenaar_with_http_info(**kwargs)  # noqa: E501

    def get_vestigingsadres_eigenaar_with_http_info(self, **kwargs):  # noqa: E501
        """van een persoon  # noqa: E501

        Zoek het vestigings-adres van een eigenaar van een bedrijf of organisatie die deelneemt aan het economisch verkeer danwel eigenaar is van een kadastraal onroerende zaak.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vestigingsadres_eigenaar_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str identificatiehandelsregisternatuurlijkpersoon: Het burgerservicenummer van de persoon die een zakelijk recht op een kadastraal onroerende zaak heeft. Deze persoon is zakelijk gerechtigde van de kadastraal onroerende zaak. Door deze query-parameter te gebruiken worden Kadastraal Onroerende Zaken geretourneerd waar deze persoon een zakelijk recht op heeft.
        :param str rsin: De identificatie van de NietNatuurlijkPersoon, bijvoorbeel een rechtspersoon (evt in oprichting), een samenwerkingsverband of een eenmanszaak met meerdere eigenaren
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VestigingsAdresEigenaarHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'identificatiehandelsregisternatuurlijkpersoon',
            'rsin'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vestigingsadres_eigenaar" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('identificatiehandelsregisternatuurlijkpersoon' in local_var_params and  # noqa: E501
                                                        len(local_var_params['identificatiehandelsregisternatuurlijkpersoon']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `identificatiehandelsregisternatuurlijkpersoon` when calling `get_vestigingsadres_eigenaar`, length must be less than or equal to `9`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identificatiehandelsregisternatuurlijkpersoon' in local_var_params and local_var_params['identificatiehandelsregisternatuurlijkpersoon'] is not None:  # noqa: E501
            query_params.append(('identificatiehandelsregisternatuurlijkpersoon', local_var_params['identificatiehandelsregisternatuurlijkpersoon']))  # noqa: E501
        if 'rsin' in local_var_params and local_var_params['rsin'] is not None:  # noqa: E501
            query_params.append(('rsin', local_var_params['rsin']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vestigingsadressen', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VestigingsAdresEigenaarHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
