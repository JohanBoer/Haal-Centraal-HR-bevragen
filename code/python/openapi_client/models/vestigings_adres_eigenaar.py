# coding: utf-8

"""
    Handelsregister bevragen

    D.m.v. deze toepassing worden meerdere, korte bevragingen op het Handelsregister beschikbaar gesteld.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VestigingsAdresEigenaar(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'rsin': 'str',
        'identificatie_handelsregister_natuurlijk_persoon': 'str',
        'adres': 'Adres'
    }

    attribute_map = {
        'rsin': 'rsin',
        'identificatie_handelsregister_natuurlijk_persoon': 'identificatieHandelsregisterNatuurlijkPersoon',
        'adres': 'adres'
    }

    def __init__(self, rsin=None, identificatie_handelsregister_natuurlijk_persoon=None, adres=None, local_vars_configuration=None):  # noqa: E501
        """VestigingsAdresEigenaar - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._rsin = None
        self._identificatie_handelsregister_natuurlijk_persoon = None
        self._adres = None
        self.discriminator = None

        if rsin is not None:
            self.rsin = rsin
        if identificatie_handelsregister_natuurlijk_persoon is not None:
            self.identificatie_handelsregister_natuurlijk_persoon = identificatie_handelsregister_natuurlijk_persoon
        if adres is not None:
            self.adres = adres

    @property
    def rsin(self):
        """Gets the rsin of this VestigingsAdresEigenaar.  # noqa: E501


        :return: The rsin of this VestigingsAdresEigenaar.  # noqa: E501
        :rtype: str
        """
        return self._rsin

    @rsin.setter
    def rsin(self, rsin):
        """Sets the rsin of this VestigingsAdresEigenaar.


        :param rsin: The rsin of this VestigingsAdresEigenaar.  # noqa: E501
        :type: str
        """

        self._rsin = rsin

    @property
    def identificatie_handelsregister_natuurlijk_persoon(self):
        """Gets the identificatie_handelsregister_natuurlijk_persoon of this VestigingsAdresEigenaar.  # noqa: E501


        :return: The identificatie_handelsregister_natuurlijk_persoon of this VestigingsAdresEigenaar.  # noqa: E501
        :rtype: str
        """
        return self._identificatie_handelsregister_natuurlijk_persoon

    @identificatie_handelsregister_natuurlijk_persoon.setter
    def identificatie_handelsregister_natuurlijk_persoon(self, identificatie_handelsregister_natuurlijk_persoon):
        """Sets the identificatie_handelsregister_natuurlijk_persoon of this VestigingsAdresEigenaar.


        :param identificatie_handelsregister_natuurlijk_persoon: The identificatie_handelsregister_natuurlijk_persoon of this VestigingsAdresEigenaar.  # noqa: E501
        :type: str
        """

        self._identificatie_handelsregister_natuurlijk_persoon = identificatie_handelsregister_natuurlijk_persoon

    @property
    def adres(self):
        """Gets the adres of this VestigingsAdresEigenaar.  # noqa: E501


        :return: The adres of this VestigingsAdresEigenaar.  # noqa: E501
        :rtype: Adres
        """
        return self._adres

    @adres.setter
    def adres(self, adres):
        """Sets the adres of this VestigingsAdresEigenaar.


        :param adres: The adres of this VestigingsAdresEigenaar.  # noqa: E501
        :type: Adres
        """

        self._adres = adres

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VestigingsAdresEigenaar):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VestigingsAdresEigenaar):
            return True

        return self.to_dict() != other.to_dict()
